# GitHub Actions CI/CD Pipeline for Sachain KYC Infrastructure
name: Deploy Sachain KYC Infrastructure

on:
  push:
    branches:
      - main
      - develop
    paths:
      - "sachain-infrastructure/**"
      - "backend/**"
  pull_request:
    branches:
      - main
      - develop
    paths:
      - "sachain-infrastructure/**"
      - "backend/**"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - staging
          - prod
      force_deploy:
        description: "Force deployment without approval"
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: "18"
  AWS_REGION: "us-east-1"

jobs:
  # Determine deployment environment based on branch
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      should_deploy: ${{ steps.env.outputs.should_deploy }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  # Lint and test infrastructure code
  test-infrastructure:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "sachain-infrastructure/package-lock.json"

      - name: Install dependencies
        working-directory: sachain-infrastructure
        run: npm ci

      - name: Run TypeScript compilation
        working-directory: sachain-infrastructure
        run: npm run build

      - name: Run unit tests
        working-directory: sachain-infrastructure
        run: npm test -- --coverage --passWithNoTests

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: sachain-infrastructure/coverage/lcov.info
          flags: infrastructure

  # Test backend Lambda functions
  test-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "backend/package-lock.json"

      - name: Install dependencies
        working-directory: backend
        run: npm ci

      - name: Run TypeScript compilation
        working-directory: backend
        run: npm run build

      - name: Run unit tests
        working-directory: backend
        run: npm test -- --coverage --passWithNoTests

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage/lcov.info
          flags: backend

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"

      - name: Run npm audit
        working-directory: sachain-infrastructure
        run: npm audit --audit-level moderate

      - name: Run npm audit for backend
        working-directory: backend
        run: npm audit --audit-level moderate

  # CDK diff for infrastructure changes
  cdk-diff:
    runs-on: ubuntu-latest
    needs: [determine-environment, test-infrastructure]
    if: github.event_name == 'pull_request'
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "sachain-infrastructure/package-lock.json"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        working-directory: sachain-infrastructure
        run: npm ci

      - name: Build project
        working-directory: sachain-infrastructure
        run: npm run build

      - name: CDK diff
        working-directory: sachain-infrastructure
        run: |
          npm run diff:${{ needs.determine-environment.outputs.environment }} > cdk-diff.txt 2>&1 || true
          echo "CDK_DIFF<<EOF" >> $GITHUB_ENV
          cat cdk-diff.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Comment PR with CDK diff
        uses: actions/github-script@v7
        with:
          script: |
            const diff = process.env.CDK_DIFF;
            const comment = `## CDK Diff for ${{ needs.determine-environment.outputs.environment }} environment

            \`\`\`
            ${diff}
            \`\`\`
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Deploy to environment
  deploy:
    runs-on: ubuntu-latest
    needs:
      [determine-environment, test-infrastructure, test-backend, security-scan]
    if: needs.determine-environment.outputs.should_deploy == 'true'
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "sachain-infrastructure/package-lock.json"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install infrastructure dependencies
        working-directory: sachain-infrastructure
        run: npm ci

      - name: Install backend dependencies
        working-directory: backend
        run: npm ci

      - name: Build infrastructure
        working-directory: sachain-infrastructure
        run: npm run build

      - name: Build backend
        working-directory: backend
        run: npm run build

      - name: Deploy infrastructure
        working-directory: sachain-infrastructure
        run: |
          if [[ "${{ needs.determine-environment.outputs.environment }}" == "prod" && "${{ github.event.inputs.force_deploy }}" != "true" ]]; then
            npm run deploy:prod
          else
            npm run deploy:${{ needs.determine-environment.outputs.environment }} -- --require-approval never
          fi

      - name: Run post-deployment validation
        working-directory: sachain-infrastructure
        env:
          TEST_ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
          RUN_INTEGRATION_TESTS: "true"
        run: npm test -- --testNamePattern="Deployed Resource Validation"

      - name: Generate deployment report
        working-directory: sachain-infrastructure
        run: |
          # Generate consolidated deployment report for all stacks
          echo '{"stacks": [' > deployment-report.json
          STACKS=(
            "SachainCoreStack-${{ needs.determine-environment.outputs.environment }}"
            "SachainSecurityStack-${{ needs.determine-environment.outputs.environment }}"
            "SachainLambdaStack-${{ needs.determine-environment.outputs.environment }}"
            "SachainMonitoringStack-${{ needs.determine-environment.outputs.environment }}"
          )

          for i in "${!STACKS[@]}"; do
            if [ $i -gt 0 ]; then echo ',' >> deployment-report.json; fi
            aws cloudformation describe-stacks --stack-name "${STACKS[$i]}" --output json | jq '.Stacks[0]' >> deployment-report.json
          done
          echo ']}' >> deployment-report.json

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report-${{ needs.determine-environment.outputs.environment }}
          path: sachain-infrastructure/deployment-report.json

  # Smoke tests after deployment
  smoke-tests:
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy]
    if: needs.determine-environment.outputs.should_deploy == 'true'
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Run smoke tests
        run: |
          # Get stack outputs from consolidated stacks
          CORE_STACK="SachainCoreStack-${{ needs.determine-environment.outputs.environment }}"
          LAMBDA_STACK="SachainLambdaStack-${{ needs.determine-environment.outputs.environment }}"
          API_URL=$(aws cloudformation describe-stacks --stack-name $LAMBDA_STACK --query 'Stacks[0].Outputs[?OutputKey==`KYCUploadApiUrl`].OutputValue' --output text)
          USER_POOL_ID=$(aws cloudformation describe-stacks --stack-name $CORE_STACK --query 'Stacks[0].Outputs[?OutputKey==`UserPoolId`].OutputValue' --output text)

          # Test API Gateway health
          echo "Testing API Gateway health..."
          curl -f "$API_URL/health" || echo "API health check failed"

          # Test Cognito User Pool
          echo "Testing Cognito User Pool..."
          aws cognito-idp describe-user-pool --user-pool-id $USER_POOL_ID

          echo "Smoke tests completed"

  # Rollback on failure (production only)
  rollback:
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy, smoke-tests]
    if: failure() && needs.determine-environment.outputs.environment == 'prod'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Rollback deployment
        run: |
          echo "Deployment failed, initiating rollback..."
          # Get previous stack templates for consolidated stacks
          STACKS=(
            "SachainCoreStack-prod"
            "SachainSecurityStack-prod"
            "SachainLambdaStack-prod"
            "SachainMonitoringStack-prod"
          )

          for stack in "${STACKS[@]}"; do
            aws cloudformation get-template --stack-name $stack --template-stage Processed > "previous-template-$stack.json"
          done

          # Note: Actual rollback would require more sophisticated logic
          # This is a placeholder for rollback procedures
          echo "Rollback procedures would be executed here"

  # Notify deployment status
  notify:
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy, smoke-tests]
    if: always() && needs.determine-environment.outputs.should_deploy == 'true'
    steps:
      - name: Notify deployment success
        if: needs.deploy.result == 'success' && needs.smoke-tests.result == 'success'
        run: |
          echo "✅ Deployment to ${{ needs.determine-environment.outputs.environment }} completed successfully"
          # Add Slack/email notification here

      - name: Notify deployment failure
        if: needs.deploy.result == 'failure' || needs.smoke-tests.result == 'failure'
        run: |
          echo "❌ Deployment to ${{ needs.determine-environment.outputs.environment }} failed"
          # Add Slack/email notification here
